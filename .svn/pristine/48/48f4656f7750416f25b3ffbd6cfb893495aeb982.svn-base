package com.iweipeng;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.iweipeng.interpret.AbstractExpression;
import com.iweipeng.interpret.AbstractExpression.ExpressionRule;
import com.iweipeng.interpret.Context;
import com.iweipeng.interpret.ObjectListAttributeExpression;
import com.iweipeng.interpret.SimpleAttributeExpression;
import com.iweipeng.interpret.SingleValueListAttributeExpression;
import com.iweipeng.runner.TaskRunner;
import com.iweipeng.service.DataTableService;
import com.iweipeng.service.RedisMappingDetailService;
import com.iweipeng.service.RedisMappingService;
import com.weiju.common.model.RedisMapping;
import com.weiju.common.model.RedisMappingDetail;
import com.weiju.common.model.WJStockDB;

@Component
public class RedisDataConverter {

	private static Logger				logger	= Logger.getLogger(RedisDataConverter.class);

	@Autowired
	private RedisMappingService			redisMappingService;

	@Autowired
	private RedisMappingDetailService	redisMappingDetailService;

	@Autowired
	private DataTableService			dataTableService;

	/**
	 * 转换指定日期内的数据，当日期为空时，默认转换当前时间之前24小时内的数据
	 * 
	 * @param startDate
	 * @param endDate
	 */
	public void parser(Date startDate, Date endDate, boolean isForce) {

		if (startDate == null) {
			Calendar now = Calendar.getInstance();
			now.set(Calendar.HOUR_OF_DAY, -24);
			startDate = now.getTime();
		}

		if (endDate == null) {
			Calendar now = Calendar.getInstance();
			endDate = now.getTime();
		}

		// STEP1. 查询关系规则映射数据
		List<RedisMapping> redisMappingList = redisMappingService.getRedisMappingAmongDate(startDate, endDate, isForce);

		Map<String, List<WJStockDB>> tableDataMap = new HashMap<String, List<WJStockDB>>();

		// 数据结构：tableName=[{String columnName,List<String> columnValue)},
		// {String columnName,List<String> columnValue)}]
		Map<String, List<Map<String, List<String>>>> dataTableMap = new HashMap<String, List<Map<String, List<String>>>>();
		logger.info("开始解析......");
		for (RedisMapping rm : redisMappingList) {

			Date lastUpdateDate = rm.getUpdateDate();
			if (lastUpdateDate == null) {
				throw new IllegalArgumentException("表redis_mapping中无效的日期updateDate:" + lastUpdateDate);
			}
			// STEP2. 查询redis数据源表data数据，用于数据解析。
			List<WJStockDB> stockDataList = getRedisTableData(tableDataMap, lastUpdateDate, rm.getKeyType());
			Integer mapId = rm.getMapId();
			if (mapId == null) {
				throw new IllegalArgumentException("无效的mapId:" + mapId);
			}
			List<Map<String, List<String>>> tableListTmp = new ArrayList<Map<String, List<String>>>();
			for (WJStockDB stockData : stockDataList) {

				String data = stockData.getData();
				if (StringUtils.isNotEmpty(data)) {

					List<RedisMappingDetail> mappingRules = redisMappingDetailService.getRedisMappingDetailListByMapId(mapId);
					Map<String, List<String>> dataColumnMap = new HashMap<String, List<String>>();
					for (RedisMappingDetail mr : mappingRules) {
						//
						Context context = new Context();
						context.setRule(mr.getJsonPath());
						context.setColumn(mr.getDbCol());
						context.setKeyTable(rm.getKeyType());
						context.setTargetTable(rm.getDbTable());
						context.setJsonData(data);
						//
						convert(context);

						logger.debug(rm.getDbTable() + " - " + context.getColumn() + " - " + context.getResult());

						dataColumnMap.put(context.getColumn(), context.getResult());
					}
					tableListTmp.add(dataColumnMap);
				} else {
					continue;
				}
			}
			dataTableMap.put(rm.getDbTable() + "@" + mapId, tableListTmp);
		}
		ExecutorService pool = Executors.newFixedThreadPool(5);
		Set<Map.Entry<String, List<Map<String, List<String>>>>> dataSet = dataTableMap.entrySet();
		Iterator<Entry<String, List<Map<String, List<String>>>>> dataTableSet = dataSet.iterator();
		while (dataTableSet.hasNext()) {
			Entry<String, List<Map<String, List<String>>>> dataTableItem = dataTableSet.next();
			pool.execute(new TaskRunner(dataTableItem, dataTableService, redisMappingService));
		}
		logger.debug("开启线程解析数据。");
		pool.shutdown();
		logger.info("解析完成.");

	}

	private void convert(Context context) {
		ExpressionRule expressionRule = context.getExpressionRule();
		AbstractExpression expression = null;
		if (expressionRule.name() == ExpressionRule.OBJECT_LIST.name()) {
			expression = new ObjectListAttributeExpression();
		} else if (expressionRule.name() == ExpressionRule.SINGLE_VALUE_LIST.name()) {
			expression = new SingleValueListAttributeExpression();
		} else {
			expression = new SimpleAttributeExpression();
		}
		expression.interpret(context);
	}

	private List<WJStockDB> getRedisTableData(Map<String, List<WJStockDB>> tableDataMap, Date dbDate, String keyTable) {
		List<WJStockDB> stockDBList = null;
		if (tableDataMap.get(keyTable) == null) {
			stockDBList = dataTableService.getDataByTableBeforeDate(keyTable, dbDate);
			tableDataMap.put(keyTable, stockDBList);
		}
		stockDBList = tableDataMap.get(keyTable);
		return stockDBList;
	}
}

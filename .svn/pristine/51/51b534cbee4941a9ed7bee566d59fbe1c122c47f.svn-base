package com.iweipeng.interpret;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 
 * <p>
 * 意图：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子．
 * </p>
 *
 * <strong>适用性：</strong>
 * 
 * <ul>
 * <li>当有一个语言需要解释执行，并且你可以把该语言中的句子表示为一个抽象的语法树时，可使用解释器模式．而当存在以下情况时，该模式的效果最好：</li>
 * <li>该文法简单，对于复杂的文法，文法的类层次变得庞大而无法管理．此时，语法分析程序生成器这样得工具时更好得选择。它们无需构建抽象语法树即可解释表达式，
 * 这样可以节省空间而且还可以节省时间；</li>
 * <li>效率不是一个关键的问题，最高效的解释器通常不是通过直接解释语法分析树实现的，而是首先把他们转换成另外一种形式．例如：正则表达式通常被转换成状态机。
 * 但即使在这种情况下，转换器仍可用解释器模式实现，该模式仍是有用的．</li>
 * </ul>
 * 
 * @author qingfeng
 *
 */
public abstract class AbstractExpression {

	protected Logger logger = LoggerFactory.getLogger(this.getClass());

	public abstract void interpret(Context context);

	public static enum ExpressionRule {
		SIMPLE, SINGLE_VALUE_LIST, OBJECT_LIST
	}
}
